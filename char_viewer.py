# -*- coding: utf-8 -*-
"""chart_viewer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sBplkXZ3Uy5MUblX3MjoZzguw5pfXjix
"""

import matplotlib.pyplot as plt
from bs4 import BeautifulSoup
import requests
import numpy as np
import sched, time
import pandas as pd


def get_data():
    url = "https://www.cbssports.com/olympics/news/tokyo-olympics-medal-tracker-gold-silver-and-bronze-counts-for-team-usa-and-every-country-at-the-2020-games/"

    r = requests.get(url)
    df_list = pd.read_html(r.text)  # this parses all the tables in webpages to a list
    df = df_list[0]
    countries = []
    gold = []
    silver = []
    bronze = []
    tot = []
    for i in range(1, 11):
        countries.append(df[1][i])
        gold.append(df[2][i])
        silver.append(df[3][i])
        bronze.append(df[4][i])
        tot.append(df[5][i])
    return countries, gold, silver, bronze, tot


def data():
    count, gold, silver, bronze, tot = get_data()
    gold = [int(x) for x in gold]
    silver = [int(x) for x in silver]
    bronze = [int(x) for x in bronze]
    tot = [int(x) for x in tot]
    alll = zip(tot, gold, silver, bronze, count)
    alll = sorted(alll, reverse=True)
    gold = [x for a, x, b, c, d in alll]
    silver = [x for a, b, x, c, d in alll]
    bronze = [x for a, b, c, x, d in alll]

    count = [x for a, b, c, d, x in alll]
    return count, gold, silver, bronze

fig = plt.figure(figsize = (12, 4))
ax1 = fig.add_subplot(1, 1, 1)

def plot(count, gold, silver, bronze):
    ax1.clear()
    labels = count
    g_data = np.array((gold))
    s_data = np.array((silver))
    b_data = np.array((bronze))
    ind = np.arange(10)
    width = 0.5  # the width of the bars: can also be len(x) sequence
    p1 = ax1.bar(ind, g_data, width, color='#d4af37')
    p2 = ax1.bar(ind, s_data, width, bottom=g_data, color='#c0c0c0')
    p3 = ax1.bar(ind, b_data, width, bottom=g_data + s_data, color='#cd7f32')

    ax1.set_ylabel('Medals')
    ax1.set_title('Top Olympics Countries')
    ax1.set_xticks(ind)
    ax1.set_xticklabels(count, rotation = 45, ha = 'right')
    ax1.legend((p1[0], p2[0], p3[0]), ('Gold', 'Silver', 'Bronze'))
    # ax1.autofmt_xdate()


starttime = time.time()


def main():
    while True:
        c, g, s, b = data()
        plot(c, g, s, b)
        plt.tight_layout()
        plt.show()
        time.sleep(180.0 - ((time.time() - starttime) % 60.0))


if __name__ == "__main__":
    main()
